{
  "stats": {
    "suites": 6,
    "tests": 11,
    "passes": 8,
    "pending": 0,
    "failures": 3,
    "start": "2025-05-13T22:27:03.185Z",
    "end": "2025-05-13T22:27:05.292Z",
    "duration": 2107,
    "testsRegistered": 11,
    "passPercent": 72.72727272727273,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f96a0ec2-a1b7-4613-bfe9-3b10c4b47600",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "67cac3fc-e593-40af-b55c-a296e166af1d",
          "title": "Auth API",
          "fullFile": "D:\\Sixth smester\\web\\fashion-spot_Updated\\fashion-spot_Updated\\auth-service\\testcases\\auth.test.js",
          "file": "\\testcases\\auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before all\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 601,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Start MongoDB in-memory server\nmongoServer = await MongoMemoryServer.create();\nconst mongoUri = mongoServer.getUri();\n\n// Disconnect from any existing connection and connect to test DB\nawait mongoose.disconnect();\nawait mongoose.connect(mongoUri);",
              "err": {},
              "uuid": "c776e946-7e78-44d0-9e3d-9282d2429d4c",
              "parentUUID": "67cac3fc-e593-40af-b55c-a296e166af1d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear User collection before each test\nawait User.deleteMany({});",
              "err": {},
              "uuid": "874d5c9e-6e3f-40e6-85d1-3508043264e7",
              "parentUUID": "67cac3fc-e593-40af-b55c-a296e166af1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"after all\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clean up\nawait mongoose.disconnect();\nawait mongoServer.stop();",
              "err": {},
              "uuid": "a6a6eae1-5c4b-473c-9a59-32c05309080c",
              "parentUUID": "67cac3fc-e593-40af-b55c-a296e166af1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ca3b3f55-1ca5-4c44-bba3-34f00e40459b",
              "title": "POST /auth/register",
              "fullFile": "D:\\Sixth smester\\web\\fashion-spot_Updated\\fashion-spot_Updated\\auth-service\\testcases\\auth.test.js",
              "file": "\\testcases\\auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user",
                  "fullTitle": "Auth API POST /auth/register should register a new user",
                  "timedOut": false,
                  "duration": 163,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n  .post('/auth/register')\n  .send({\n    email: 'test@example.com',\n    password: 'password123',\n    role: 'customer',\n  });\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'User registered successfully');\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "af2213ca-480d-4063-bed1-6eb51f04a6e7",
                  "parentUUID": "ca3b3f55-1ca5-4c44-bba3-34f00e40459b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register a user with an existing email",
                  "fullTitle": "Auth API POST /auth/register should not register a user with an existing email",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.create({\n  email: 'test@example.com',\n  password: 'password123',\n  role: 'customer',\n});\nconst res = await chai.request(app)\n  .post('/auth/register')\n  .send({\n    email: 'test@example.com',\n    password: 'password123',\n    role: 'customer',\n  });\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('message', 'User already exists');",
                  "err": {},
                  "uuid": "06433517-77ff-440d-b2e9-4fb2db2e05b7",
                  "parentUUID": "ca3b3f55-1ca5-4c44-bba3-34f00e40459b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid input",
                  "fullTitle": "Auth API POST /auth/register should return 400 for invalid input",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n  .post('/auth/register')\n  .send({\n    email: 'invalid-email',\n    password: '',\n  });\nexpect(res).to.have.status(500); // Adjust based on actual validation",
                  "err": {},
                  "uuid": "fd1f82de-1926-40b3-a6e6-acb448fbae32",
                  "parentUUID": "ca3b3f55-1ca5-4c44-bba3-34f00e40459b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af2213ca-480d-4063-bed1-6eb51f04a6e7",
                "06433517-77ff-440d-b2e9-4fb2db2e05b7",
                "fd1f82de-1926-40b3-a6e6-acb448fbae32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 280,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "78b18c9a-af35-43da-919c-1c73f68bc8f7",
              "title": "POST /auth/login",
              "fullFile": "D:\\Sixth smester\\web\\fashion-spot_Updated\\fashion-spot_Updated\\auth-service\\testcases\\auth.test.js",
              "file": "\\testcases\\auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /auth/login\"",
                  "fullTitle": "Auth API POST /auth/login \"before each\" hook in \"POST /auth/login\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await chai.request(app)\n  .post('/auth/register')\n  .send({\n    email: 'test@example.com',\n    password: 'password123',\n    role: 'customer',\n  });",
                  "err": {},
                  "uuid": "860eb46e-c61d-4ced-9b7a-1fa8571ded80",
                  "parentUUID": "78b18c9a-af35-43da-919c-1c73f68bc8f7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login a user with correct credentials",
                  "fullTitle": "Auth API POST /auth/login should login a user with correct credentials",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n  .post('/auth/login')\n  .send({\n    email: 'test@example.com',\n    password: 'password123',\n  });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('message', 'Login successful');\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "10862aea-81e6-4616-afbc-8006298ddc6c",
                  "parentUUID": "78b18c9a-af35-43da-919c-1c73f68bc8f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not login with incorrect password",
                  "fullTitle": "Auth API POST /auth/login should not login with incorrect password",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n  .post('/auth/login')\n  .send({\n    email: 'test@example.com',\n    password: 'wrongpassword',\n  });\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('message', 'Incorrect password');",
                  "err": {},
                  "uuid": "956ad3f8-4aca-4805-9879-f53145cdcdea",
                  "parentUUID": "78b18c9a-af35-43da-919c-1c73f68bc8f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not login with non-existent user",
                  "fullTitle": "Auth API POST /auth/login should not login with non-existent user",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n  .post('/auth/login')\n  .send({\n    email: 'nonexistent@example.com',\n    password: 'password123',\n  });\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('message', 'User not found');",
                  "err": {},
                  "uuid": "574dea54-a5d4-4061-8a37-586743478015",
                  "parentUUID": "78b18c9a-af35-43da-919c-1c73f68bc8f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10862aea-81e6-4616-afbc-8006298ddc6c",
                "956ad3f8-4aca-4805-9879-f53145cdcdea",
                "574dea54-a5d4-4061-8a37-586743478015"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 187,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "85182fa3-f404-43c5-aa21-f874be4bdfe6",
          "title": "Product API",
          "fullFile": "D:\\Sixth smester\\web\\fashion-spot_Updated\\fashion-spot_Updated\\auth-service\\testcases\\product.test.js",
          "file": "\\testcases\\product.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Product API\"",
              "fullTitle": "Product API \"before all\" hook in \"Product API\"",
              "timedOut": false,
              "duration": 512,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Start MongoDB in-memory server\nmongoServer = await MongoMemoryServer.create();\nconst mongoUri = mongoServer.getUri();\n\n// Connect to test DB\nawait mongoose.disconnect();\nawait mongoose.connect(mongoUri);\n// Create an admin user and generate a token\nconst admin = await User.create({\n  email: 'admin@example.com',\n  password: 'password123',\n  role: 'admin',\n});\nadminToken = jwt.sign(\n  { userId: admin._id, role: admin.role },\n  process.env.JWT_SECRET || 'yourSecretKey123',\n  { expiresIn: '1h' }\n);",
              "err": {},
              "uuid": "9d5b11f0-190d-4d08-b196-4ad1264d70b6",
              "parentUUID": "85182fa3-f404-43c5-aa21-f874be4bdfe6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Product API\"",
              "fullTitle": "Product API \"before each\" hook in \"Product API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear Product collection before each test\nawait Product.deleteMany({});",
              "err": {},
              "uuid": "bdbbeeea-953b-45be-a3f9-f7afd61bce58",
              "parentUUID": "85182fa3-f404-43c5-aa21-f874be4bdfe6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Product API\"",
              "fullTitle": "Product API \"after all\" hook in \"Product API\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clean up\nawait mongoose.disconnect();\nawait mongoServer.stop();",
              "err": {},
              "uuid": "5e1311bd-592d-4927-8f82-c28d3908bb87",
              "parentUUID": "85182fa3-f404-43c5-aa21-f874be4bdfe6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "060eaace-a14b-4a97-b00a-bf31da049f41",
              "title": "POST /products",
              "fullFile": "D:\\Sixth smester\\web\\fashion-spot_Updated\\fashion-spot_Updated\\auth-service\\testcases\\product.test.js",
              "file": "\\testcases\\product.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a product with admin access",
                  "fullTitle": "Product API POST /products should create a product with admin access",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const productData = {\n  name: 'Test Product',\n  description: 'A test product',\n  price: 29.99,\n  images: ['http://example.com/image.jpg'],\n  category: 'Test Category',\n  stock: 100,\n};\nconst res = await chai.request(app)\n  .post('/products')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send(productData);\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'Product added successfully');\nexpect(res.body.product).to.have.property('name', 'Test Product');",
                  "err": {
                    "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 404",
                    "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 201 but got 404\n    at Context.<anonymous> (testcases\\product.test.js:68:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 404\n+ 201\n"
                  },
                  "uuid": "01f8d480-c2e5-4ed2-a6e9-305a1901f37c",
                  "parentUUID": "060eaace-a14b-4a97-b00a-bf31da049f41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a product without admin access",
                  "fullTitle": "Product API POST /products should not create a product without admin access",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const customerToken = jwt.sign(\n  { userId: 'customer_id', role: 'customer' },\n  process.env.JWT_SECRET || 'yourSecretKey123',\n  { expiresIn: '1h' }\n);\nconst res = await chai.request(app)\n  .post('/products')\n  .set('Authorization', `Bearer ${customerToken}`)\n  .send({\n    name: 'Test Product',\n    description: 'A test product',\n    price: 29.99,\n    images: ['http://example.com/image.jpg'],\n    category: 'Test Category',\n    stock: 100,\n  });\nexpect(res).to.have.status(403);\nexpect(res.body).to.have.property('message', 'Forbidden: Access denied');",
                  "err": {
                    "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 403 but got 404",
                    "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 403 but got 404\n    at Context.<anonymous> (testcases\\product.test.js:92:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 404\n+ 403\n"
                  },
                  "uuid": "af52721c-40a2-4b3d-bb85-92496348cb2e",
                  "parentUUID": "060eaace-a14b-4a97-b00a-bf31da049f41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid product data",
                  "fullTitle": "Product API POST /products should return 400 for invalid product data",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n  .post('/products')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send({\n    name: '',\n    description: 'Invalid product',\n  });\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('error', 'Error adding product');",
                  "err": {
                    "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 400 but got 404",
                    "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 400 but got 404\n    at Context.<anonymous> (testcases\\product.test.js:105:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 404\n+ 400\n"
                  },
                  "uuid": "4e798a95-8a43-4f2a-9865-d9eba5adac2f",
                  "parentUUID": "060eaace-a14b-4a97-b00a-bf31da049f41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "01f8d480-c2e5-4ed2-a6e9-305a1901f37c",
                "af52721c-40a2-4b3d-bb85-92496348cb2e",
                "4e798a95-8a43-4f2a-9865-d9eba5adac2f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5704ba61-018d-4102-ba44-352c240b1f20",
              "title": "GET /products",
              "fullFile": "D:\\Sixth smester\\web\\fashion-spot_Updated\\fashion-spot_Updated\\auth-service\\testcases\\product.test.js",
              "file": "\\testcases\\product.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve all products",
                  "fullTitle": "Product API GET /products should retrieve all products",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Product.create({\n  name: 'Test Product',\n  description: 'A test product',\n  price: 29.99,\n  images: ['http://example.com/image.jpg'],\n  category: 'Test Category',\n  stock: 100,\n});\nconst res = await chai.request(app)\n  .get('/products');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body[0]).to.have.property('name', 'Test Product');",
                  "err": {},
                  "uuid": "9dba8179-b2da-4830-960c-f1cad858494d",
                  "parentUUID": "5704ba61-018d-4102-ba44-352c240b1f20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return empty array when no products exist",
                  "fullTitle": "Product API GET /products should return empty array when no products exist",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n  .get('/products');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body).to.have.lengthOf(0);",
                  "err": {},
                  "uuid": "31faca3a-3e9e-4fe7-bafc-9cf7302affa1",
                  "parentUUID": "5704ba61-018d-4102-ba44-352c240b1f20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9dba8179-b2da-4830-960c-f1cad858494d",
                "31faca3a-3e9e-4fe7-bafc-9cf7302affa1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./mochawesome-report",
        "reportFilename": "report"
      },
      "version": "6.2.0"
    }
  }
}