openapi: 3.0.3
info:
  title: Auth Service API
  description: API documentation for the Auth Service, handling authentication, products, orders, and payments.
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Local development server
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: Password123
                role:
                  type: string
                  enum: [admin, customer, brand]
                  example: customer
              required:
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: User already exists
        '500':
          description: Server error
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: Password123
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: User not found or incorrect password
        '500':
          description: Server error
  /auth/google-login:
    post:
      summary: Login with Google
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: user@example.com
                picture:
                  type: string
                  example: https://example.com/avatar.jpg
              required:
                - email
      responses:
        '200':
          description: Google login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '500':
          description: Server error
  /auth/forgot-password:
    post:
      summary: Request password reset
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
              required:
                - email
      responses:
        '200':
          description: Reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
        '500':
          description: Server error
  /auth/reset-password/{token}:
    post:
      summary: Reset password
      tags:
        - Authentication
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: NewPassword123
              required:
                - newPassword
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid or expired token
        '500':
          description: Server error
  /auth/users:
    get:
      summary: Get all users (Admin only)
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
        '500':
          description: Server error
  /auth/users/{id}:
    delete:
      summary: Delete a user by ID (Admin only)
      tags:
        - Authentication
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
        '403':
          description: Forbidden
        '500':
          description: Server error
  /products:
    post:
      summary: Create a new product (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  product:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '403':
          description: Forbidden
        '500':
          description: Server error
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
  /products/{id}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Server error
    put:
      summary: Update a product (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  product:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '403':
          description: Forbidden
        '500':
          description: Server error
    delete:
      summary: Delete a product (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Product not found
        '403':
          description: Forbidden
        '500':
          description: Server error
  /orders:
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '403':
          description: Forbidden
        '500':
          description: Server error
    get:
      summary: Get all orders (Admin only)
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
        '500':
          description: Server error
  /payment/checkout:
    post:
      summary: Process a payment
      tags:
        - Payments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  example: 1234567890
                amount:
                  type: number
                  example: 99.99
                paymentMethod:
                  type: string
                  example: card
              required:
                - orderId
                - amount
                - paymentMethod
      responses:
        '200':
          description: Payment processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  paymentId:
                    type: string
        '400':
          description: Invalid input
        '403':
          description: Forbidden
        '500':
          description: Server error
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: Hashed password (not returned in responses)
        role:
          type: string
          enum: [admin, customer, brand]
          description: User's role
        resetToken:
          type: string
          description: Password reset token
        resetTokenExpires:
          type: string
          format: date-time
          description: Password reset token expiration
      required:
        - email
        - password
        - role
    Product:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the product
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        images:
          type: array
          items:
            type: string
          description: Array of image URLs
        category:
          type: string
          description: Product category
        stock:
          type: number
          description: Available stock
        createdAt:
          type: string
          format: date-time
          description: Creation date
      required:
        - name
        - description
        - price
        - images
        - category
        - stock
    Order:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the order
        userId:
          type: string
          description: ID of the user who placed the order
        cart:
          type: object
          description: Cart details (JSONB)
        totalAmount:
          type: number
          description: Total order amount
        shippingDetails:
          type: object
          description: Shipping details (JSONB)
        status:
          type: string
          description: Order status
          default: Pending
      required:
        - userId
        - cart
        - totalAmount
        - shippingDetails
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT